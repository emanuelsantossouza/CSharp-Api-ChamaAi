// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chamaAi.Context;

#nullable disable

namespace chamaAi.Migrations
{
    [DbContext(typeof(ApiChamaAiContext))]
    partial class ApiChamaAiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("apiChamaAi.Entities.Chat", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ClienteId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MensagemId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MensagemId");

                    b.HasIndex("SedeId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Mensagem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("DataDEnvio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioDEnvio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Pedido", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("DescricaoProduto")
                        .HasColumnType("longtext");

                    b.Property<string>("EnderecoAtual")
                        .HasColumnType("longtext");

                    b.Property<string>("EnderecoDestino")
                        .HasColumnType("longtext");

                    b.Property<string>("EnderecoNumeroAtual")
                        .HasColumnType("longtext");

                    b.Property<string>("EnderecoNumeroDestino")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoAtual")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoDestino")
                        .HasColumnType("longtext");

                    b.Property<string>("FormaDePagamento")
                        .HasColumnType("longtext");

                    b.Property<string>("HoraChegadaMotoboyCliente")
                        .HasColumnType("longtext");

                    b.Property<string>("HoraMotoboyEntregaCliente")
                        .HasColumnType("longtext");

                    b.Property<string>("HoraPedidoCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HoraSaidaMotoboySede")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroAtual")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDestino")
                        .HasColumnType("longtext");

                    b.Property<string>("PesoProduto")
                        .HasColumnType("longtext");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("TamanhoProduto")
                        .HasColumnType("longtext");

                    b.Property<uint>("UsuarioId")
                        .HasColumnType("int unsigned");

                    b.Property<int>("ValorAproximadoDaCorrida")
                        .HasColumnType("int");

                    b.Property<bool>("isFragil")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("SedeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Sede", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EnderecoNumero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SobreNos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("UsuarioId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Usuario", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("ConfirmaSenha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataDNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FotoDePerfil")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Veiculo", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("MotoboyId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("NumeroDChassis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MotoboyId");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Administrador", b =>
                {
                    b.HasBaseType("apiChamaAi.Entities.Usuario");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Cliente", b =>
                {
                    b.HasBaseType("apiChamaAi.Entities.Usuario");

                    b.Property<bool>("Favoritos")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HistoricoPedidos")
                        .HasColumnType("longtext");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Motoboy", b =>
                {
                    b.HasBaseType("apiChamaAi.Entities.Usuario");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EnderecoNumero")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lincenca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDeIndentificacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("SedeId")
                        .HasColumnType("int unsigned");

                    b.HasIndex("SedeId");

                    b.ToTable("Motoboys");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Chat", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiChamaAi.Entities.Mensagem", "Mensagem")
                        .WithMany()
                        .HasForeignKey("MensagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiChamaAi.Entities.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Mensagem");

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Pedido", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiChamaAi.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("apiChamaAi.Entities.EscolhaPedido", "QualServico", b1 =>
                        {
                            b1.Property<uint>("PedidoId")
                                .HasColumnType("int unsigned");

                            b1.Property<bool>("Corrida")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("Entrega")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("PedidoId");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");
                        });

                    b.OwnsOne("apiChamaAi.Entities.LatLng", "LocalizacaoClienteDestino", b1 =>
                        {
                            b1.Property<uint>("PedidoId")
                                .HasColumnType("int unsigned");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("PedidoId");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");
                        });

                    b.OwnsOne("apiChamaAi.Entities.LatLng", "LocalizacaoClienteOrigem", b1 =>
                        {
                            b1.Property<uint>("PedidoId")
                                .HasColumnType("int unsigned");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("PedidoId");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");
                        });

                    b.Navigation("LocalizacaoClienteDestino")
                        .IsRequired();

                    b.Navigation("LocalizacaoClienteOrigem")
                        .IsRequired();

                    b.Navigation("QualServico");

                    b.Navigation("Sede");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Sede", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("apiChamaAi.Entities.LatLng", "LocalizacaoSede", b1 =>
                        {
                            b1.Property<uint>("SedeId")
                                .HasColumnType("int unsigned");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("SedeId");

                            b1.ToTable("Sedes");

                            b1.WithOwner()
                                .HasForeignKey("SedeId");
                        });

                    b.Navigation("LocalizacaoSede")
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Veiculo", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Motoboy", "Motoboy")
                        .WithMany()
                        .HasForeignKey("MotoboyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motoboy");
                });

            modelBuilder.Entity("apiChamaAi.Entities.Administrador", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("apiChamaAi.Entities.Administrador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("apiChamaAi.Entities.Cliente", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("apiChamaAi.Entities.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("apiChamaAi.Entities.Motoboy", b =>
                {
                    b.HasOne("apiChamaAi.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("apiChamaAi.Entities.Motoboy", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiChamaAi.Entities.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");
                });
#pragma warning restore 612, 618
        }
    }
}
